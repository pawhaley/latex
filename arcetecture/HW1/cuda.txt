#include <iostream>
#include <fstream>
#include "lib/inc.c" // netrun timing functions

// Make up a random 3D vector of this range.
//   NOT ACTUALLY RANDOM, just pseudorandom via linear congruence.
void randomize(int index,float range,float &x,float &y,float &z) {
	index=index^(index<<24); // fold index (improve whitening)
	x=(((index*1234567)%1039)/1000.0-0.5)*range;
	y=(((index*7654321)%1021)/1000.0-0.5)*range;
	z=(((index*1726354)%1027)/1000.0-0.5)*range;
}

class position {
public:
	float px,py,pz; // position's X, Y, Z components (meters)
	
	// Return distance to another position
	__device__ __host__
	float distance(const position &p) const {
		float dx=p.px-px;
		float dy=p.py-py;
		float dz=p.pz-pz;
		return sqrt(dx*dx+dy*dy+dz*dz);
	}
};

class body : public position {
public:
	float m; // mass (Kg)
};

class asteroid : public body {
public:
	float vx,vy,vz; // velocity (m)
	float fx,fy,fz; // net force vector (N)
	__device__ __host__
	void setup(void) {
		fx=fy=fz=0.0;
	}
	
	// Add the gravitational force on us due to this body
	__device__ __host__
	void add_force(const body &b) {
		// Newton's law of gravitation:
		//   length of F = G m1 m2 / r^2
		//   direction of F = R/r
		float dx=b.px-px;
		float dy=b.py-py;
		float dz=b.pz-pz;
		float r=sqrt(dx*dx+dy*dy+dz*dz);
		
		float G=6.67408e-11; // gravitational constant
		float scale=G*b.m*m/(r*r*r);
		fx+=dx*scale;
		fy+=dy*scale;
		fz+=dz*scale;
	}
	
	// Use known net force values to advance by one timestep
	__device__ __host__
	void step(float dt) {
		float ax=fx/m, ay=fy/m, az=fz/m;
		vx+=ax*dt; vy+=ay*dt; vz+=az*dt;
		px+=vx*dt; py+=vy*dt; pz+=vz*dt;
	}
};




// A simple fixed-size image
class image {
public:
	int wA=1;
	enum { pixels=500 };
	unsigned char pixel[pixels][pixels];
	void clear(void) {
		for (int y=0;y<pixels;y++)
			for (int x=0;x<pixels;x++) 
				pixel[y][x]=0;
	}
	__device__
	void draw(float fx,float fy) {
		int y=(int)(fx*pixels);
		int x=(int)(fy*pixels);
		if (y>=0 && y<pixels && x>=0 && x<pixels){
			compAdd(&pixel[y][x]);
			//if (pixel[y][x]<200) pixel[y][x]+=10;
			//if (pixel[y][x]<200) atomicAdd((unsigned int*)&(pixel[y][x]),1);
			//atomicInc(&(pixel[y][x]),20);
		}
	}
	
	__device__
	void compAdd(unsigned char* bace){
		//int ok=0;
		//do{
		//	ok=atomicExch(&wA, 0);
		//}while(ok!=1);
		if(*bace<200) *bace+=10;
		//atomicExch(&wA, 1);
	}
	
	void write(const char *filename) {
		std::ofstream f("out.ppm",std::ios_base::binary);
		f<<"P5 "<<pixels<<" "<<pixels<<"\n";
		f<<"255\n";
		for (int y=0;y<pixels;y++)
			for (int x=0;x<pixels;x++) {
				f.write((char*)&(pixel[y][x]),1);
			}
	}
	
	
};

__global__
void runner(asteroid* aOnD,image* imgD,float* closestD){
	closestD[threadIdx.x+256*blockIdx.x]=1.0e100;
	asteroid a=aOnD[threadIdx.x+256*blockIdx.x];
	body terra; 
	terra.px=0.0; terra.py=0.0; terra.pz=0.0; 
	terra.m=5.972e24;
	
	body luna;
	luna.px=384.4e6; luna.py=0.0; luna.pz=0.0;
	luna.m=7.34767309e22;
	float range=500e6;
	
	for (int i=0;i<1000;i++)
	{
		a.setup();
		a.add_force(terra);
		a.add_force(luna);
		a.step(1000.0);
		
		// Draw current location of asteroid
		imgD->draw(
				a.px*(1.0/range)+0.5,
				a.py*(1.0/range)+0.5);
		
		// Check distance
		float d=terra.distance(a);
		if (closestD[threadIdx.x+256*blockIdx.x]>d) closestD[threadIdx.x+256*blockIdx.x]=d;
	}
	
}


int main(void) {
	image img;
	
	enum { n_asteroids=8192 };
	float range=500e6;
	float p2v=3.0e-6; // position (meters) to velocity (meters/sec)
	
	body terra; 
	terra.px=0.0; terra.py=0.0; terra.pz=0.0; 
	terra.m=5.972e24;

	for (int test=0;test<5;test++) {
		float closest_approach=1.0e100;
		img.clear(); // black out the image
	
		double start=time_in_seconds();
/* performance critical part here */
		asteroid aOnH[n_asteroids];
		asteroid* aOnD;
		for (int ai=0;ai<n_asteroids;ai++)
		{
			int run=0;
			do {
				randomize(ai*100+run,range,aOnH[ai].px,aOnH[ai].py,aOnH[ai].pz);
				run++;
			} while (aOnH[ai].distance(terra)<10000e3);
			aOnH[ai].m=1.0;
			aOnH[ai].vx=-aOnH[ai].py*p2v; aOnH[ai].vy=aOnH[ai].px*p2v; aOnH[ai].vz=0.0;
			
			//
		}
		image* imgD;
		cudaMalloc((void **) &imgD, sizeof(image));
		cudaMemcpy(imgD,&img,sizeof(image),cudaMemcpyHostToDevice);
		

		cudaMalloc((void **) &aOnD, n_asteroids*sizeof(asteroid));
		cudaMemcpy(aOnD,aOnH,n_asteroids*sizeof(asteroid),cudaMemcpyHostToDevice);
		
		float* closestD;
		cudaMalloc((void **) &closestD, 32*256*sizeof(float));
		
		runner<<<32,256>>>(aOnD,imgD,closestD);
		
		cudaDeviceSynchronize();
		cudaMemcpy(&img,imgD,sizeof(image),cudaMemcpyDeviceToHost);
		cudaMemcpy(aOnH,aOnD,n_asteroids*sizeof(asteroid),cudaMemcpyDeviceToHost);
		float ca[32*256];
		cudaMemcpy(ca,closestD,32*256*sizeof(float),cudaMemcpyDeviceToHost);
		
		cudaDeviceSynchronize();
		
		for(int i=0;i<32*256;i++){
			if (closest_approach>ca[i]) closest_approach=ca[i];
		}
		
		
		//img.multen();
		
		double elapsed=time_in_seconds()-start;
		std::cout<<"Took "<<elapsed<<" seconds, "<<elapsed*1.0e9/n_asteroids<<" ns/asteroid\n";
		std::cout<<"  closest approach: "<<closest_approach<<"\n";
	}
	
	img.write("out.ppm"); // netrun shows "out.ppm" by default
}


